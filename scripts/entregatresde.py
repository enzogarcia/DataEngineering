# -*- coding: utf-8 -*-
"""EntregaUnoDE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KohdyWt9I8yvoT1TdQvurrN1s5LcUGe3
"""

#Importo las librerías

import pandas as pd
import numpy as np
from pandas import json_normalize
import io
from configparser import ConfigParser
import psycopg2
import psycopg2.extras


#Hago uso de la API de Coincap (https://docs.coincap.io/), para conocer el valor de las criptomonedas, entre otras cosas.

import http.client

conn = http.client.HTTPSConnection("api.coincap.io")
payload = ''
headers = {}
conn.request("GET", "/v2/assets", payload, headers)
res = conn.getresponse()
data = res.read()

#Paso los datos obtenidos de la API a dataframe.

cadena = data.decode('utf-8')
diccionario = pd.read_json(cadena)
lista = json_normalize(diccionario['data'])
df_crypto = pd.DataFrame(lista)
df_crypto.shape
df_crypto.head()

#Observo los tipos de variables

df_crypto.info()

#Paso los datos al tipo correcto, ya que Redshift me tomaba todas las columnas como varchar anteriormente

Vector_float = ['maxSupply', 'marketCapUsd', 'volumeUsd24Hr', 'priceUsd', 'changePercent24Hr', 'vwap24Hr']
Vector_VC = ['id', 'symbol', 'name', 'explorer']

df_crypto[Vector_float] = df_crypto[Vector_float].astype('float').round(2)
df_crypto[Vector_VC] = df_crypto[Vector_VC].astype('str')
df_crypto['rank'] = df_crypto['rank'].astype('int')


#Agrego una columna de tipo Timestamp, que me resultará útil.

df_crypto['date'] = pd.Timestamp.today()

#df_crypto.info()

print(df_crypto)

#Verifico los nulos y elimino duplicados (si los hay)

df_crypto.isnull().sum()

df_crypto.fillna(0, inplace = True)

df_crypto.drop_duplicates()

df_crypto.info()

#Creo funciones para crear la cadena de conexión y la conexión a la base de datos.

def build_conn_string(config_path, config_section):

  # Lee el archivo de configuración.
  parser = ConfigParser()
  parser.read(config_path)

  # Lee la sección de configuración de PostgreSQL.
  config = parser[config_section]
  host = config['host']
  port = config['port']
  dbname = config['dbname']
  username = config['username']
  pwd = config['pwd']

  # Contruye la cadena de conexión.
  conn_string =f'postgresql://{username}:{pwd}@{host}:{port}/{dbname}?sslmode=require'

  return conn_string


# Crea una conexión a la base de datos.

conn_string = build_conn_string('C:\Docker-Compose\plugins\config.ini', 'redshift')


connection = psycopg2.connect(conn_string)
cursor = connection.cursor()

#Creo la tabla en la base de datos de Redshift.

esquema = 'enzodavidgarcia_coderhouse'   

crear_tabla = f"""
    CREATE TABLE IF NOT EXISTS {esquema}.datos_cripto (
        Id_Crypto INTEGER PRIMARY KEY,
        idName VARCHAR(30),
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        rank INTEGER,
        symbol VARCHAR(10),
        name VARCHAR(30),
        supply FLOAT,
        maxSupply FLOAT,
        marketCapUsd FLOAT,
        volumeUsd24Hr FLOAT,
        priceUsd FLOAT,
        changePercent24Hr FLOAT,
        vwap24Hr FLOAT,
        explorer VARCHAR(50)
    );
    """

cursor.execute(crear_tabla)

connection.commit()

#Creo el Id para la tabla

Tabla = 'datos_cripto'
Columna = 'Id_Crypto'

df_crypto['Id_Crypto'] = range(1, 1 + len(df_crypto))


#Cargo los datos del dataframe a la tabla creada previamente.

datos = df_crypto.to_records(index = False)

consulta_sql = """
INSERT INTO criptomonedas (id, "id", date, rank, symbol, name, supply, maxSupply, marketCapUsd, volumeUsd24Hr, priceUsd, changePercent24Hr, vwap24Hr, explorer)
VALUES (%s, %s, CURRENT_TIMESTAMP, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
"""

for fila in datos:
    cursor.execute(consulta_sql, fila)
